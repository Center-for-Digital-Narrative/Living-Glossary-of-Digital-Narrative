---

---
<astro-theme-icon>
    <button type="button" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg text-sm p-2.5">
        <svg class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
        <svg class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
    </button>
</astro-theme-icon>

<script is:inline>
    // Set the theme here to prevent a flash of the default theme
    if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
    }
</script>

<script>
    class AstroThemeIcon extends HTMLElement {
        connectedCallback() {
            const button = this.querySelector('button');
            if(button === null){
                throw new Error('No button found in the astro-theme-icon component');
            }

            // Set the icons inside the button based on previous settings
            if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                button.children[0].classList.remove('hidden');
            } else {
                button.children[1].classList.remove('hidden');
            }

            button.addEventListener('click', () => {

                // Update icons on all theme icon buttons
                document.querySelectorAll("astro-theme-icon > button").forEach((button) => {
                    button.children[0].classList.toggle('hidden');
                    button.children[1].classList.toggle('hidden');
                });

                const setIsDarkMode = (isDarkMode:boolean) => {
                    if (isDarkMode) {
                        document.documentElement.classList.add('dark');
                        localStorage.setItem('color-theme', 'dark');
                    } else {
                        document.documentElement.classList.remove('dark');
                        localStorage.setItem('color-theme', 'light');
                    }
                };

                const toggleDarkMode = async (isDarkMode:boolean) => {

                    if ( !document.startViewTransition || window.matchMedia('(prefers-reduced-motion: reduce)').matches ) {
                        setIsDarkMode(isDarkMode);
                        return;
                    }

                    // Create a temporary style tag to disable view-transition animations
                    const style = document.createElement('style');
                    style.innerHTML = `
                        ::view-transition-old(root),
                        ::view-transition-new(root) {
                            animation: none !important;
                        }
                    `;
                    document.head.appendChild(style);

                    await document.startViewTransition(() => {
                        setIsDarkMode(isDarkMode);
                    }).ready;

                    const { top, left, width, height } = button.getBoundingClientRect();
                    const x = left + width / 2;
                    const y = top + height / 2;
                    const right = window.innerWidth - left;
                    const bottom = window.innerHeight - top;
                    const maxRadius = Math.hypot(
                        Math.max(left, right),
                        Math.max(top, bottom),
                    );
                    const animation = document.documentElement.animate(
                        {
                            clipPath: [
                                `circle(0px at ${x}px ${y}px)`,
                                `circle(${maxRadius}px at ${x}px ${y}px)`,
                            ],
                        },
                        {
                            duration: 500,
                            easing: 'ease-in-out',
                            pseudoElement: '::view-transition-new(root)',
                        }
                    );
                    animation.finished.then(() => {
                        setTimeout(() => style.remove(), 50);
                    });
                };

                // if set via local storage previously
                if (localStorage.getItem('color-theme')) {
                    toggleDarkMode(localStorage.getItem('color-theme') === 'light');
                // if NOT set via local storage previously
                } else {
                    toggleDarkMode(document.documentElement.classList.contains('dark') === true);
                }
            });
        }
    }

    customElements.define('astro-theme-icon', AstroThemeIcon);
</script>