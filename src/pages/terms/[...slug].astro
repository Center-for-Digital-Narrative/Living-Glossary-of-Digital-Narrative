---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from 'astro:content';
import NavSmall from "../../components/NavSmall.astro";
import NavMobile from "../../components/NavMobile.astro";
import TermCitation from "../../components/TermCitation.astro";
import {formatDate} from "../../utils/formatDate";
import SeeAlso from "../../components/shortcodes/SeeAlso.astro";

export async function getStaticPaths() {
    const termEntries = await getCollection('terms');
    return termEntries.map(entry => ({
        params: { slug: entry.slug }, props: { entry },
    }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const components = {
    SeeAlso
};
---
<BaseLayout pageTitle={entry.data.title + ' | LGDN'}>
    <div class="container p-2 md:p-0">
        <div class="flex flex-col items-center">
            <article class="prose dark:prose-invert xl:prose-lg my-8 data-pagefind-body">
                <h1 style="margin-bottom: 0" class="text-4xl lg:text-7xl xl:text-8xl font-bold">{entry.data.title}</h1>
                <!--<h1 style="margin-bottom: 0" class="text-4xl lg:text-7xl xl:text-8xl font-bold" transition:name=`title ${entry.slug}`>{entry.data.title}</h1>-->
                <p>
                    <em>{entry.data.description}</em>
                    <br>
                    {entry.data.author && <span>{entry.data.author}</span>}
                    {entry.data.pubDate && <span>{formatDate(entry.data.pubDate)}</span>}
                </p>

                <Content components={components} />

                <TermCitation term={entry} />

                <p class="border-t pt-6 text-sm">Text is available under the <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
            </article>
        </div>
    </div>
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyButton = document.getElementById("copy_button");
        const citationText = document.getElementById("citation_text");
        const tooltip = document.getElementById('copy_tooltip');
        if (!copyButton || !citationText || !tooltip) return;
        copyButton.addEventListener('click', () => {
            navigator.clipboard.writeText(citationText.innerText)
            tooltip.classList.remove('opacity-0');
            setTimeout(() => {
                tooltip.classList.add('opacity-0');
            }, 1000);
        });
    });
</script>